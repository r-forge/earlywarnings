Y[1,1]
plot(1:length(Y),Y)
plot(ts(1:length(Y)),Y)
length(Y)
xx=read.table('CSD_6Dec11.txt',header=FALSE)
length(xx)
dim(xx)
?length
?data
xx=data('CSD_6Dec11.txt')
# Conditional Heteroskedasticity#
# Author: Timothy Cline, October 25, 2011.#
# Modified by: Vasilis Dakos, January 3, 2012.#
#
ch_ews<-function(timeseries, winsize = 10, alpha=0.1, optim=TRUE,lags=4){#
	#ts.in<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (is.null(dim(timeseries)[2])){#
		ts.in=timeseries#
		timeindex=1:length(ts.in)#
		}else if(dim(timeseries)[2]==2){#
		ts.in=timeseries[,2]#
		timeindex=timeseries[,1]#
 		}else{#
		warning("not right format of timeseries input")#
		}#
				#
	winSize=round(winsize*length(ts.in)/100)#
	sto<-matrix(nrow=(length(ts.in)-(winSize-1)),ncol=5) # creates a matrix to store output#
	#
	count<-1 #place holder for writing to the matrix#
	for(i2 in winSize:length(ts.in)){ # loop to iterate through the model values by window lengths of the input value#
		#
		#the next line applys the autoregressive model optimized using AIC #
		#then we omit the first data point(s) which come back as NA #
		#and square the residuals#
		if(optim==TRUE){#
			arm<-ar(ts.in[(i2-(winSize-1)):i2],method='ols')#
		}else{#
			arm<-ar(ts.in[(i2-(winSize-1)):i2],aic=FALSE,order.max=lags,method='ols')		}#
		resid1<-na.omit(arm$resid)^2#
		#
		l1<-length(resid1) # stores the number of residuals for many uses later#
		lm1<-lm(resid1[2:l1]~resid1[1:(l1-1)])#calculates simple OLS model of describing t+1 by t#
		#
		# calculates the critical value: Chi-squared critical value using desired #
		# alpha level and 1 degree of freedom / number of residuals used in regression#
		critical<-qchisq((1-alpha),df=1)/(length(resid1)-1) #
		#
		sto[count,1]<-timeindex[i2] # stores a time component#
		sto[count,2]<-summary(lm1)$r.squared # stores the r.squared for this window#
		sto[count,3]<-critical # stores the critical value#
		#
		# the next flow control group stores a simple 1 for significant test or 0 for non-significant test#
		if(summary(lm1)$r.squared>critical){#
			sto[count,4]<-1#
		}else{sto[count,4]<-0}#
		sto[count,5]<-arm$order#
		count<-count+1	# increment the place holder#
	}#
	#
	sto<-data.frame(sto) # data types the matrix as a data frame#
	colnames(sto)<-c("time","r.squared","critical.value","test.result","ar.fit.order") # applies column names to the data frame#
	#
	#This next series of flow control statements will adjust the max and minimum values to yield prettier plots#
	#In some circumstances it is possible for all values to be far greater or far less than the critical value; in all cases we want the critical line ploted on the figure#
	if(max(sto$r.squared)<critical){#
		maxY<-critical+0.02  #
		minY<-critical-0.02#
	}else if(min(sto$r.squared>=critical)){#
		minY<-critical-0.02#
		maxY<-critical+0.02#
	}else{#
		maxY<-max(sto$r.squared)#
		minY<-min(sto$r.squared)#
  }                       #
    #
	#this creates a very simple plot that is well fitted to the data. #
	#it also plots the critical value line	#
#
	par(mar=(c(0,4,0,1)+0),oma=c(5,1,2,1),mfrow=c(2,1))#
	plot(timeindex,ts.in,type="l",ylab="data",xlab="",cex.axis=0.8,cex.lab=0.8,xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	plot(timeindex[winSize:length(timeindex)],sto$r.squared,ylab=expression(paste("R^2")),xlab="time",type="b",cex=0.5,cex.lab=0.8, cex.axis=0.8,las=1,ylim=c(min(sto$r.squared),max(sto$r.squared)),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","conditional heteroskedasticity",bty = "n")#
	abline(h=sto$critical,lwd=0.5,lty=2,col=2)#
	mtext("time",side=1,line=2,cex=0.8)#outer=TRUE print on the outer margin#
	#
	return(sto)#
}
head(xx)
head(x)
head(xxx)
plot(xxx)
ch_ews(xxx)
ch_ews(ts(xxx))
w=ts(xxx)
plot(w)
ch_ews(ts(xxx))
ch_ews(w)
dim(w)
p=as.vector(w)
head(p)
ch_ews(p)
?write
write(p,'foldbif.txt')
xx=read.delim('foldbif.txt',header=FALSE)
dim(xx)
head(xx)
getwd()
dim(p)
length(p)
write(p,'foldbif.txt',ncolumns=1)
xx=read.delim('foldbif.txt',header=FALSE)
head(xx)
dim(xx)
length(xx)
plot(xx)
plot(p)
?read.table
xx=read.delim('foldbif.txt',header=FALSE)
plot(xx)
xx=read.delim('foldbif.txt',header=TRUE)
plot(xx)
head(xx)
xx=read.delim('foldbif.txt',header=FALSE)
xx=scan('foldbif.txt',header=FALSE)
xx=scan('foldbif.txt')
plot(xx)
dim(x)
dim(xx)
source("/Users/vasilisdakos/Dropbox/early_warning_tools_&_data_sets/R_code/Rpackage/earlywarnings/man/generic_ews.Rd")
?plot
?bds.test
load("/Users/vasilisdakos/Documents/warningsignals/data/glaciationIII.rda")
a=load("/Users/vasilisdakos/Documents/warningsignals/data/glaciationIII.rda")
a
a[1]
a[2]
a[2,]
a[,2]
?data
?install.package
?install.packages
?data
library(earlywarnings)
?earlywarnings
?generic_ews
data("foldbif")
foldbif
plot(foldbif)
plot(as.matrix(foldbif))
data(circulation)
plot(circulation)
head(circulation)
head(circulation)?
?bandi5
?ch_ews
data(circulation)
?generic_ews
data(circulation)
plot(circulation)
x=data(circulation)
dim(x)
head()
head(x)
x
head(circulation)
generic_ews(circulation)
lenght(circulation)
length(circulation)
dim(circlation)
dim(circulation)
x=circulation[1:782,]
generic_ews(circulation)
generic_ews(x)
generic_ews(x,detrending="gaussian",ARn=FALSE)
getwd()
generic_ews(x,detrending="gaussian",ARn=FALSE)
x
getwd()
dir
list
list()
dir()
generic_ews(x,detrending="gaussian",ARn=FALSE)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,ARn=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if((detrending=="no") | (detrending=="first-diff")){#
		}else{#
		lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(timeindex,Y,ylab="",xlab="",xaxt="n",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),(max(Y)-min(Y))/2,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (ARn==TRUE){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum==TRUE){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="gaussian",ARn=FALSE)
generic_ews(x)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,ARn=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if((detrending=="no") | (detrending=="first-diff")){#
		}else{#
		lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(timeindex,Y,ylab="",xlab="",xaxt="n",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),(max(Y)-min(Y))/2,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (ARn){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if((detrending=="no") | (detrending=="first-diff")){#
		}else{#
		lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(timeindex,Y,ylab="",xlab="",xaxt="n",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),(max(Y)-min(Y))/2,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (ARn){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if((detrending=="no") | (detrending=="first-diff")){#
		}else{#
		lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(timeindex,Y,ylab="",xlab="",xaxt="n",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),(max(Y)-min(Y))/2,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	# if((detrending=="no") | (detrending=="first-diff")){#
		# }else{#
		# lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(timeindex,Y,ylab="",xlab="",xaxt="n",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),(max(Y)-min(Y))/2,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x)
generic_ews(x,detrending="no")
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	# if((detrending=="no") | (detrending=="first-diff")){#
		# }else{#
		# lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(timeindex,Y,ylab="",xlab="",yaxt,="n",xaxt="n",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	# if((detrending=="no") | (detrending=="first-diff")){#
		# }else{#
		# lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(timeindex,Y,ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="no")
?median
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	# if((detrending=="no") | (detrending=="first-diff")){#
		# }else{#
		# lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(timeindex,Y,ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),median(Y),"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="no")
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	# if((detrending=="no") | (detrending=="first-diff")){#
		# }else{#
		# lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(c(0,1),c(0,1),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(0.5,0.5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="no")
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	# if((detrending=="no") | (detrending=="first-diff")){#
		# }else{#
		# lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="no")
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	# if((detrending=="no") | (detrending=="first-diff")){#
		# }else{#
		# lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(10,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="no")
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	# if((detrending=="no") | (detrending=="first-diff")){#
		# }else{#
		# lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",type="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(10,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="no")
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	# if((detrending=="no") | (detrending=="first-diff")){#
		# }else{#
		# lines(timeindex,smY,col=2,xaxt="n",)}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="no")
generic_ews(x)
generic_ews(x,detrending="gaussina")
generic_ews(x,detrending="gaussian")
generic_ews(x,detrending="first-diff")
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,smY,type="l",ylab="",xlab="",xaxt="n",col=2,las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="gaussian")
?lines
?line
?plot
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,smY,ylab="",xlab="",xaxt="n",col=3,las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="gaussian")
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,smY,type="l",ylab="",xlab="",xaxt="n",col=3,las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="gaussian")
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,smY,type="l",ylab="",xlab="",xaxt="n",col=2,las=1)#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="gaussian")
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,smYY$y,type="l",ylab="",xlab="",xaxt="n",col=2,las=1)#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="gaussian")
generic_ews(x,detrending="gaussian",bandwidth=25)
plot(c(1,10),c(10,20))
lines(3,14)
lines(c(3,5),c(14,15))
lines(c(3,5),c(14,15),las)
lines(c(3,5),c(14,15),las=1)
plot(c(1,10),c(10,20))
lines(c(3,5),c(14,15),las=1)
lines(c(3,5),c(14,15),las=1,col=2)
lines(c(3,5),c(14,15),las=2,col=2)
	#}
generic_ews(x,detrending="gaussian",bandwidth=25)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	#if(detrending=="gaussian"){#
		lines(timeindex,smY,ylab="",xlab="",xaxt="n",col=2,las=10)#
	#}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="gaussian",bandwidth=25)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	#if(detrending=="gaussian"){#
		lines(timeindex,smY,ylab="",xlab="",xaxt="n",col=2,las=10)#
	#}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="gaussian",bandwidth=25)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	#if(detrending=="gaussian"){#
		lines(timeindex,smY,ylab="",xlab="",xaxt="n",col=2,las=1)#
	#}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="gaussian",bandwidth=25)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	#if(detrending=="gaussian"){#
		lines(timeindex,smY,type="l",ylab="",xlab="",xaxt="n",col=2,las=1)#
	#}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="gaussian",bandwidth=25)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	#if(detrending=="gaussian"){#
		lines(timeindex,smY,type="l",ylab="",xlab="",xaxt="n",col=2,las=3)#
	#}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x,detrending="gaussian",bandwidth=25)
generic_ews(x)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	#if(detrending=="gaussian"){#
		lines(timeindex,smYY$y,type="l",ylab="",xlab="",xaxt="n",col=2,las=3)#
	#}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
generic_ews(x)
generic_ews(x,detrending="gaussian",bandwidth=25)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,smYY$y,type="l",ylab="",xlab="",xaxt="n",col=2,las=3)#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	#return(out)#
	}
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,smYY$y,type="l",ylab="",xlab="",xaxt="n",col=2,las=1)#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	#return(out)#
	}
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,smYY$y,type="l",ylab="",xlab="",xaxt="n",col=2,las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	#return(out)#
	}
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,smYY$y,type="l",ylab="",xlab="",xaxt="n",col=2,las=1)#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	#return(out)#
	}
generic_ews(x)
x=generic_ews(x)
x
x$ar1
x[1]
x$ar1[1]
x[[1]]
x[[2]]
x[[2,]]
dim(x)
length(x)
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,smYY$y,type="l",ylab="",xlab="",xaxt="n",col=2,las=1)#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
x=generic_ews(x)
x=circulation[1:300,]
y=generic_ews(x)
y=generic_ews(x,detrending="gaussian")
y
y[[1]]
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,smY,type="l",ylab="",xlab="",xaxt="n",col=2,las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
y=generic_ews(x,detrending="gaussian")
# Generic Early Warning Signals#
# Author: Vasilis Dakos, January 2, 2012#
	#
generic_ews<-function(timeseries,winsize=50,detrending=c("no","gaussian","linear","first-diff"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE,AR_n=FALSE,powerspectrum=FALSE){#
	#
	# Load required packages#
	require('lmtest')#
	require('nortest')#
	require('stats')#
	require('som')#
	require('Kendall')#
	require('KernSmooth')#
	require('e1071')#
	#
	timeseries<-ts(timeseries) #strict data-types the input data as tseries object for use in later steps#
	if (dim(timeseries)[2]==1){#
		Y=timeseries#
		timeindex=1:dim(timeseries)[1]#
		}else if(dim(timeseries)[2]==2){#
		Y<-timeseries[,2]#
		timeindex<-timeseries[,1]#
		}else{#
		warning("not right format of timeseries input")#
		}#
		#
	# Interpolation#
	if (interpolate){#
		YY<-approx(timeindex,Y,n=length(Y),method="linear")#
		Y<-YY$y#
		}else{#
		Y<-Y}#
			#
	# Log-transformation#
	if (logtransform){#
		Y<-log(Y+1)}#
	#
	# Detrending	#
	detrending<-match.arg(detrending)	#
	if (detrending=="gaussian"){#
		if (is.null(bandwidth)){#
			bw<-round(bw.nrd0(timeindex))}else{#
			bw<-round(length(Y)*bandwidth)/100}#
		smYY<-ksmooth(timeindex,Y,kernel=c("normal"), bandwidth=bw, range.x=range(timeindex),n.points=length(timeindex))#
		nsmY<-Y-smYY$y#
		smY<-smYY$y#
	}else if(detrending=="linear"){#
		nsmY<-resid(lm(Y~timeindex))#
		smY<-fitted(lm(Y~timeindex))#
	}else if(detrending=="first-diff"){#
		nsmY<-diff(Y)#
		timeindexdiff<-timeindex[1:(length(timeindex)-1)]#
	}else if(detrending=="no"){#
		smY<-Y#
		nsmY<-Y#
	}#
#
#
	# Rearrange data for indicator calculation#
	mw<-round(length(Y)*winsize)/100#
	omw<-length(nsmY)-mw+1 ##number of moving windows#
	low<-6#
	high<-omw#
	nMR<-matrix(data=NA,nrow=mw,ncol=omw)#
	x1<-1:mw#
		for (i in 1:omw){ 	 #
		Ytw<-nsmY[i:(i+mw-1)]#
		nMR[,i]<-Ytw}#
#
	# Calculate indicators#
	nARR<-numeric()#
	nSD<-numeric()#
	nSK<-numeric()#
	nKURT<-numeric()#
	nACF<-numeric()#
	nDENSITYRATIO<-numeric()#
	nSPECT<-matrix(0,nrow=omw, ncol=ncol(nMR))#
	nCV<-numeric()#
	smARall<-numeric()#
	smARmaxeig<-numeric()#
	detB<-numeric()#
	ARn<-numeric()#
#
	for (i in 1:ncol(nMR)){#
		nYR<-ar.ols(nMR[,i],aic= FALSE, order.max=1, dmean=FALSE, 		intercept=FALSE)#
		nARR[i]<-nYR$ar#
		nSD[i]<-sd(nMR[,i], na.rm = TRUE)#
		nSK[i]<-abs(skewness(nMR[,i],na.rm=TRUE))#
	nKURT[i]<-kurtosis(nMR[,i],na.rm=TRUE)#
	nCV[i]<-nSD[i]/mean(nMR[,i])#
	ACF<-acf(nMR[,i], lag.max = 1, type = c("correlation"), plot=FALSE)#
	nACF[i]<-ACF$acf[2]#
	spectfft<-spec.ar(nMR[,i],n.freq=omw,plot=FALSE,order=1)#
	nSPECT[,i]<-spectfft$spec#
	nDENSITYRATIO[i]<- spectfft$spec[low]/spectfft$spec[high]#
	#
	## RESILIENCE IVES 2003 Indicators based on AR(n)#
	ARall<-ar.ols(nMR[,i],aic= TRUE,order.max=6,demean=F, intercept=F)#
	smARall[i]<-ARall$ar[1]#
	ARn[i]<-ARall$order#
	roots<-Mod(polyroot(c(rev(-ARall$ar),1)))#
	smARmaxeig[i]<-max(roots)#
	detB[i]<-(prod(roots))^(2/ARn[i])}#
	#
	nRETURNRATE=1/nARR#
	#
	# Estimate Kendall trend statistic for indicators#
	timevec<-seq(1,length(nARR))#
	KtAR<-cor.test(timevec,nARR,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtACF<-cor.test(timevec,nACF,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSD<-cor.test(timevec,nSD,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtSK<-cor.test(timevec,nSK,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtKU<-cor.test(timevec,nKURT,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtDENSITYRATIO<-cor.test(timevec,nDENSITYRATIO,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtRETURNRATE<-cor.test(timevec,nRETURNRATE,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
	KtCV<-cor.test(timevec,nCV,alternative=c("two.sided"),method=c("kendall"),conf.level=0.95)#
#
	# Plotting#
	# Generic Early-Warnings#
	dev.new()#
	par(mar=(c(0,2,0,1)+0),oma=c(7,2,3,1),mfrow=c(5,2))#
	plot(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	if(detrending=="gaussian"){#
		lines(timeindex,Y,type="l",ylab="",xlab="",xaxt="n",col=2,las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	}#
	if(detrending=="no"){#
		plot(c(0,10),c(0,10),ylab="",xlab="",yaxt="n",xaxt="n",type="n",las=1)#
		text(5,5,"no residuals - no detrending")#
		}else if (detrending=="first-diff"){#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindexdiff,nsmY,ylab="",xlab="",type="l",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindexdiff[1],timeindexdiff[length(timeindexdiff)]))#
		legend("topleft","first-differenced",bty = "n")		}else{#
		limit<-max(c(max(abs(nsmY))))#
		plot(timeindex,nsmY,ylab="",xlab="",type="h",xaxt="n",las=1,ylim=c(-	limit,limit),xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		legend("topleft","residuals",bty = "n")}#
	plot(timeindex[mw:length(nsmY)],nARR,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #3#
	legend("bottomleft",paste("Kendall tau=",round(KtAR$estimate,digits=3)),bty = "n")#
	legend("topleft","ar(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nACF,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)])) #4#
	legend("bottomleft",paste("Kendall tau=",round(KtACF$estimate,digits=3)),bty = "n")#
	legend("topleft","acf(1)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nRETURNRATE,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtRETURNRATE$estimate,digits=3)),bty = "n")#
	legend("topleft","return rate",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nDENSITYRATIO,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c	(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtDENSITYRATIO$estimate,digits=3)),bty = "n")#
	legend("topleft","density ratio",bty = "n")#
	plot(timeindex[mw:length(nsmY)],nSD,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtSD$estimate,digits=3)),bty = "n")#
	legend("topleft","standard deviation",bty = "n")#
	if(detrending=="no"){#
		plot(timeindex[mw:length(nsmY)],nCV,ylab="",xlab="",type="l",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("bottomleft",paste("Kendall tau=",round(KtCV$estimate,digits=3)),bty = "n")#
	legend("topleft","coefficient of variation",bty = "n")}else{#
		plot(timeindex,Y,ylab="",xlab="",type="n",xaxt="n",las=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
		text(mean(timeindex),mean(Y),"no coeff var estimated - data detrended")}#
	plot(timeindex[mw:length(nsmY)],nSK,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","skewness",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtSK$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	plot(timeindex[mw:length(nsmY)],nKURT,type="l",ylab="",xlab="",las=1,cex.lab=1,xlim=c(timeindex	[1],timeindex[length(timeindex)]))#
	legend("topleft","kurtosis",bty = "n")#
	legend("bottomleft",paste("Kendall tau=",round(KtKU$estimate,digits=3)),bty = "n")#
	mtext("time",side=1,line=2,cex=0.8)#
	mtext("Generic Early-Warnings",side=3,line=0.2, outer=TRUE)#outer=TRUE print on the outer margin#
#
	# Resilience Estimators based on AR(n)#
	if (AR_n){#
	dev.new()#
	par(mar=(c(1,2,0,1)+0.2),oma=c(4,2,3,1),mfrow=c(2,2))#
	plot(timeindex[mw:length(nsmY)],ARn,type="p",ylab="",xlab="",xaxt="n",cex=0.1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)])) #10#
	legend("topleft","AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARmaxeig,type="l",ylab="",xlab="",xaxt="n",las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	legend("topleft","max eigenvalue",bty = "n")#
	plot(timeindex[mw:length(nsmY)],detB,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","geometric mean root AR(n)",bty = "n")#
	plot(timeindex[mw:length(nsmY)],smARall,type="l",ylab="",xlab="",cex.lab=1,las=1,cex.axis=0.8,xlim=c(timeindex[1],timeindex[length(timeindex)]))#
	mtext("time",side=1,line=2,cex=0.8)#
	legend("topleft","b1 of AR(n)",bty = "n")#
	mtext("Resilience Estimators based on AR(n)",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Power spectrum#
	if (powerspectrum){#
	dev.new()#
	par(mar=(c(4.6,4,0.5,2)+0.2),oma=c(0.5,1,2,1))#
	image(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),ylab="rolling window",xlab="frequency",log="x",xlim=c(spectfft$freq[2],spectfft$freq	[length(spectfft$freq)]),col=topo.colors(20),xaxs="i")#
	contour(x=(spectfft$freq[2:length(spectfft$freq)]),y=(seq(1,ncol	(nSPECT),by=1)),log(nSPECT[2:length(spectfft$freq),]),add=TRUE)#
	mtext("Power spectrum within rolling windows",side=3,line=0.2, outer=TRUE)#
	}#
	#
	# Output#
	out<-data.frame(timeindex[mw:length(nsmY)],nARR,nSD,nSK,nKURT,nCV,nRETURNRATE,nDENSITYRATIO,nACF)#
	colnames(out)<-c("timeindex","ar1","sd","sk","kurt","cv","returnrate","densratio","acf1")#
	return(out)#
	}
y=generic_ews(x,detrending="gaussian")
?odd
?mod
?modulus
?modu;
?modul
?spec.ar
y=generic_ews(circulation)
spec.ar(circulation)
xx=ts(circulation)
spec.ar(xx)
?spec.ar
spec.ar(xx)
spectrum(xx)
e=spectrum(xx)
e
dim(e$spec)
dim(xx)
?spectrum
e=spectrum(xx,method="ar",freq=100)
e=spectrum(xx,freq=100)
dim(e$spec)
y=generic_ews(circulation)
y=generic_ews(xx)
y=generic_ews(x)
length(x)
dim(x)
dim(circulation)
dim(x)
xx=x[1:299,2]
y=generic_ews(xx)
xx=x[1:299,]
y=generic_ews(xx)
install.packages(c("tseries","quadprog"))
generic_ews(timeseries,winsize=50,detrending=c("gaussian","linear",#
+ "first-diff","no"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE)
generic_ews(timeseries,winsize=50,detrending=c("gaussian","linear",#
+ "first-diff","no"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE)
?generic_ews
data(foldbif)
generic_ews(timeseries,winsize=50,detrending=c("gaussian","linear",#
+ "first-diff","no"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE)
timeseries=data(foldbif)
generic_ews(timeseries,winsize=50,detrending=c("gaussian","linear",#
+ "first-diff","no"),bandwidth=NULL,logtransform=FALSE,interpolate=FALSE)
timeseries=data(foldbif)
out=generic_ews(foldbif,winsize=50,detrending="gaussian",bandwidth=5,logtransform=FALSE,interpolate=FALSE)
timeseries=data(foldbif)
out=generic_ews(foldbif,winsize=50,detrending="gaussian",bandwidth=5,logtransform=FALSE,interpolate=FALSE)
?generic_ews
